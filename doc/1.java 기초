interface
동물원
 - 사육사
 - 동물들
    -  사자
    -  호랑이

Action 사육사는 사자를 보면 바나나를 준다.
       사육사는 호랑이를 보면 사과를 준다.


// 최상위 클레스 동물
Animal.java
public class Animal {
    String name;

    public void setName(String name) {
        this.name = name;
    }
}

// 호랑이 클레스는 동물클래스를 상속 받는다
Tiger.java
public class Tiger extends Animal {

}
// 사자 클레스는 동물클래스를 상속받는다
Lion.java
public class Lion extends Animal {

}

사육사는 먹이를 준다.
ZooKeeper.java
public class ZooKeeper {
    public void feed(Tiger tiger) {
        System.out.println("feed apple");
    }

    public void feed(Lion lion) {
        System.out.println("feed banana");
    }


}

시나리오 실행 클래스
 public static void main(String[] args) {
        ZooKeeper zooKeeper = new ZooKeeper();
        Tiger tiger = new Tiger();
        Lion lion = new Lion();
        zooKeeper.feed(tiger);
        zooKeeper.feed(lion);
    }

시나리오 결과

feed apple
feed banana
자, 이제 다음을 생각 해 보자.

동물원에 호랑이와 사자뿐이라면 ZooKeeper 클래스는 완벽하겠지만 악어
, 표범등이 계속 추가된다면 ZooKeeper는 육식동물이 추가될 때마다 매번 다음과
같은 feed 메소드를 추가해야 한다.

...

public void feed(Crocodile crocodile) {
    System.out.println("feed strawberry");
}

public void feed(Leopard leopard) {
    System.out.println("feed orange");
}

...
이렇게 육식동물이 추가 될 때마다 feed 메소드를 추가해야 한다면 사육사(ZooKeeper)가 얼마나 귀찮겠는가?

이런 어려움을 극복하기 위해서 이제 인터페이스의 마법을 부려보자.

다음과 같이 육식동물(Predator) 인터페이스를 작성 해 보자.

Predator.java

public interface Predator {

}
위 코드와 같이 인터페이스는 class가 아닌 interface 라는 키워드를 이용하여 작성한다.

그리고 Tiger, Lion 은 작성한 인터페이스를 구현하도록 변경한다.

Tiger.java

public class Tiger extends Animal implements Predator {

}
Lion.java

public class Lion extends Animal implements Predator {

}
인터페이스 구현은 위와같이 implements 라는 키워드를 사용한다.

Tiger, Lion이 Predator 인터페이스를 구현하면 ZooKeeper 클래스의 feed 메소드를 다음과 같이 변경 할 수 있다.

변경전

public void feed(Tiger tiger) {
    System.out.println("feed apple");
}

public void feed(Lion lion) {
    System.out.println("feed banana");
}
변경후

public void feed(Predator predator) {
    System.out.println("feed apple");
}
feed 메소드의 입력으로 Tiger, Lion을 각각 필요로 했지만 이제 이것을 Predator라는 인터페이스로 대체할 수 있게 되었다. tiger, lion은 각각 Tiger, Lion의 객체이기도 하지만 Predator 인터페이스의 객체이기도 하기 때문에 위와같이 Predator를 자료형의 타입으로 사용할 수 있는 것이다.

tiger - Tiger 클래스의 객체, Predator 인터페이스의 객체
lion - Lion 클래스의 객체, Predator 인터페이스의 객체
※ 이와같이 객체가 한 개 이상의 자료형 타입을 갖게되는 특성을 다형성(폴리모피즘)이라고 하는데 이것에 대해서는 "다형성" 챕터에서 자세히 다루도록 한다.

이제 어떤 육식동물이 추가되더라도 ZooKeeper는 feed 메소드를 추가할 필요가 없다. 다만 육식동물이 추가 될 때마다 다음과 같이 Predator 인터페이스를 구현한 클래스를 작성하기만 하면 되는 것이다.

Crocodile.java

public class Crocodile extends Animal implements Predator {
}
눈치가 빠르다면 이제 왜 인터페이스가 필요한지 감을 잡았을 것이다. 보통 중요 클래스를 작성하는 입장이라면(여기서라면 ZooKeeper가 중요한 클래스가 될 것이다) 클래스의 구현체와 상관없이 인터페이스를 기준으로 중요 클래스를 작성해야만 한다. 구현체(Tiger, Lion, Crocodile,...)는 늘어가지만 인터페이스(Predator)는 하나이기 때문이다.

자, 그런데 위 ZooKeeper 클래스에 약간의 문제가 발생했다. 아래의 ZooKeeper클래스의 feed 메소드를 보면 호랑이가 오던지, 사자가 오던지 무조건 "feed apple" 이라는 문자열을 출력한다. 사자가 오면 "feed banana" 를 출력해야 하지 않겠는가!

public void feed(Predator predator) {
    System.out.println("feed apple");
}
역시 인터페이스의 마법을 부려보자.

Predator 인터페이스에 다음과 같은 메소드를 추가 해 보자.

Predator.java

public interface Predator {
    public String getFood();
}
getFood 라는 메소드를 추가했다. 그런데 좀 이상하다. 메소드에 몸통이 없다?

인터페이스의 메소드는 메소드의 이름과 입출력에 대한 정의만 있고 그 내용은 없다. 그 이유는 인터페이스는 규칙이기 때문이다. 위에서 설정한 getFood라는 메소드는 인터페이스를 implements한 클래스들이 구현해야만 하는 것이다.

인터페이스에 위처럼 메소드를 추가하면 Tiger, Lion등 Predator 인터페이스를 구현한 클래스들에서 컴파일 오류가 발생할 것이다. 오류를 해결하기 위해 Tiger, Lion에 getFood 메소드를 구현하도록 하자.

Tiger.java

public class Tiger extends Animal implements Predator {
    public String getFood() {
        return "apple";
    }
}
Lion.java

public class Lion extends Animal implements Predator {
    public String getFood() {
        return "banana";
    }
}
getFood 메소드는 육식동물의 먹이인 "apple", "banana"등을 리턴하도록 작성했다. 이상없이 컴파일이 잘 될 것이다.

이제 ZooKeeper 클래스도 다음과 같이 변경이 가능하다.

public class ZooKeeper {
    public void feed(Predator predator) {
        System.out.println("feed "+predator.getFood());
    }
}